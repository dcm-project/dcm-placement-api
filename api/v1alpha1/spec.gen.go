// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYX2/bthf9KgR/v4cNkCzbjbfUb86fZcbqNEgyPyzoA0NdW2wpkiMpZ17h7z6QlG3J",
	"YpIGaLagKOrqUoeX5557eeyvmMpSSQHCGjz+ig0toCT+40QpziixTAr3X6WlAm0Z+KAgJbh/czBUMxUW",
	"4UtSApILZAtApPF6guEvUioOeIyJUqkBvQKd9gc4wXat3GNjNRNLvEmwCzIaQb8JgUc2EFWJx3f4Ae4D",
	"Ov4UwbYMdBf4SnJG1+iWgY6Dd3D+liLw0Ab6wz1+hoA7XJkUiLGpO/3289ClyyyUHrWbd3hAtCZrvNkk",
	"WMOfFdOQOzxfiz1v+3PL+89ArXu/UcsPzFi3x26z/2tY4DH+X7ZXQlbLIGtqoJNGgs+AcqIhn5cOiHD+",
	"cYHHd09Dzmd4kxzKiWogFvKJ7XJ6ugs1VTTsD0dp/306OL4djMZHR+N+P1anXJjLqFLPLm/QZeBtD6o0",
	"1T2iVE9pmfeoLGOQS2Lhgay7kBd1oIk46Pfcn6jOWR5JqyYUzWdoetaCyutQejT6KQqnJnmuwURkOb1C",
	"21gsuWEMToAtifkS6fE60KrGaNTb/o3UYdNR5KeWeF4kyYbmIoo811rq7riiMo+IwC9GPtY4zVG/v8Nl",
	"wsIStEOGLXIMowRjyLKtpqlYEc5y5FoVjEWKaFKCBW1QiuYu5PsK/UIYhzzKWrPLw/6x5r7ihEIJwl6D",
	"UVIY6J6/kCbSWrdEL8EiH2xm7h6kPx+//1bV7hI41KzaBh4T7Za37qy3xFYmyut8hkxFKRizqDhfI79J",
	"Hr1JPMhT+dYrOjk/X45tZrGCXIeKv1jafjR2JD2fRfSsqkhnVuV9uMFOr35HVGponew4qmqximharJiW",
	"wjP0Qw6rxPG0ZGKZIDcZfzwYmjJK/vMOYcW0rQhHJaEFE/AylyAjdf2oQBPLxBKZtbFQthB1ATwGpEnZ",
	"RbqezBAT6OKkCTEYRinUsKwtUrS7QhgtpEa7dmgl1rQD3ewkj7B4LfmOxfmsXY7qnjOaLgh1CDELBIII",
	"O4208a2PHPZwWJ8Ohu+e7YnaiDhGfYESr9Mgsvoo3XZxIEwspMuHMwr1/ArywRNFaAFo6K+VSnM3naxV",
	"ZpxlDw8PPeLDPamXWf2uyT5MT88vb87TYa/fK2zJg++zYXbUkpsFyaH9JJhcTXGCV6BNIGM1IFwVZOC1",
	"pkAQxfAYv3M3Jk6wIrbwAswaLs8/WILvdxmkKIUjGl+AnTTXOdrCqPbvDPv9cEkJ68ThrNR+dfbZBHWF",
	"KfECx+Znj+f3oE1+c4c6+o6bhls3stUJ2d1/Xi2mKkui14ESRDhHLf42CVb1TdUmMJjASctR17gnMl+/",
	"BnvhOHt5W13BplO4wett/QaLFsqAiGh9uXFrsq09XZVPtsHevb1qFxx4y7feBFvyDq9EE7gtgHBbPErr",
	"ryEcp7N76lYG4V1EC6Bfwmb+kspW/lKMN6Mfmv7aeY0WdCboWzrv+xWu658jRZzP9td3w3/+NyJK8Ojf",
	"2HMqLGhBOApODEG9sCkgTx4iHTPntaS3RviZqdAwzK86Fg6N+VufCzv+YoOh/qkMtPG/uQRzlLnv1v8E",
	"AAD//6TAajrVEwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
