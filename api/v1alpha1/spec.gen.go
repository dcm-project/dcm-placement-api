// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXUW/bNhD+KwS3hw2QLdttts5vSZNlxuo0SDq/FH1gqLPEliK5I+XMCPzfB5KyI1lM",
	"0wHtNgQBbJ/48fjdd99RD5Tr2mgFylk6f6CWV1Cz8PEcuGQIxar235iUb9d0/v6Bfo+wpnP6Xf64Mm+X",
	"5asl3WUP1KA2gE5AACqUvWI1hI9gOQrjhFZ0Ts+vbkmIZBT+YrWRQOfUIMcxM2ZsUBdjrmuaUbc1PmQd",
	"ClXSXUZL5uCebYeQl22gizidjP3fNAUkikRa7cHJakkW5z2oog2NXp78lIQzp0WBYO0QdXFN9rFUcrMU",
	"nAJXM/tpCHbVBrpIs5OT8f5/MkTbHX7Rdx+BO7r7sMs6RX4jrPMbCQd1SP9zde5o4xGXIbKt/36BqNFD",
	"9HXAdZEQQXiYhFjnNC8nkwOuUA5KQI8Me+QURg3WsrKvpoXaMCkKgvBnA9YRw5DV4AAtGZGVDzGPQX5l",
	"QkKRZM0vFQgFnb9v9/8woDKj15JxqEG5G7BGKwvD81c6MtzP/R3DEhwJwW7m/ofRz69++VLVHhI41qzZ",
	"B54S7Z63AeStY66xSV5XS2IbzsHadSPlloRNihS6DSCfy7d9YpDz8+XYZ5YqyE2s+D+WdrCwgaRXy4Se",
	"TZPozKa+AyR6TV5f/0G4Ruid7FVS1WqT0LTaCNQqMPRDAZvM81QKVWbEO+OPR6apk+SrpO96z/UZugrI",
	"RqBrmCQ145VQ/SIzY0YWcAM4miTdUyfq+tYAMidUSezWOqh7iFiBTAEhq4dIN6dLIhS5POtCTGdJChHK",
	"sOiJ7ophstZIDu3QS6yxI2DWjZLHRC0TLN5oeWBxteyXo7mTgo/WjHuEBKIDxZRbJNr4XYgc93B8fjSd",
	"vXi2J1QcqJ7RUKAs6DSK7MBTe6Z9IqJItJAHFmqtfY5ScGg9LUqKnhrGKyCzMGoalN6xnDN2nuf39/dj",
	"FsJjjWXerrX5m8Xri6vbi9FsPBlXrpaBCOGin7QyXEYZkkd3OL1e0IxuAG0kaDNl0lRsGvRnQDEj6Jy+",
	"8FOUZtQwVwVR5vtRvYktX0KwAB3VqZXnnl6Ce5xkNtATzTssmU0mcWwp5+XiL0HGSMHD+vyjjXqLvvHl",
	"AzOYUSD3qG9+9yd6+RX3jGM4sdUZOwzEIB/b1DXDbSSEMCnJnrxje7Dh+bwCJl31JK2/xXCazuGpexnE",
	"tYRXwD/FzULD5ptgEKYdof39glhCC7anOtPF9qvR6AdCv8kcNrD7hmIZ3iUSRVwtH62sM4v/GxFl9OTf",
	"2HOhHKBiksSpRKB9sCugQB5hg8EWtIT7S8EzrtC5PHxTWzi+pPzffeHAX8oY/IpQFxveE+NQyP17xt8B",
	"AAD//3nYKllmDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
