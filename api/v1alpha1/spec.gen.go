// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXUW/bNhf9KwS/72EDZMt2k63zW9JkmbE6DZLOL0UfGOpaYkuR3CXlzAj83weSsiNZ",
	"TJcB7TYEAWxf8fDy3HPPpR4p17XRCpSzdP5ILa+gZuHjBXDJEIpV7b8xKd+t6fzDI/0/wprO6f/yp5V5",
	"uyxfLekue6QGtQF0AgJQoew1qyF8BMtRGCe0onN6cX1HQiSj8AerjQQ6pwY5jpkxY4O6GHNd04y6rfEh",
	"61Coku4yWjIHD2w7hLxqA13E6WTs/6YpIFEk0moPTlZLsrjoQRVtaHRy+kMSzpwVBYK1Q9TFDdnHUsnN",
	"UnAKXM3s5yHYdRvoIs1OT8f7/8kQbXf4Rd9/Au7o7uMu6xT5rbDObyQc1CH9L9W5o40nXIbItv77JaJG",
	"D9HXAddFQgThYRJindOcTCYHXKEclIAeGfbIKYwarGVlX00LtWFSFATh9wasI4Yhq8EBWjIiKx9iHoP8",
	"zISE4iWsZfRGMg41KHcL1mhlYXjUSkcy+2m+Z1iCIyHYTdL/MPrx9U8vFeghgWN5mn3gOX3uKRpA3jnm",
	"GpukcLUktuEcrF03Um5J2KRIodsA8qV82ycGOb+Q+dtYxb8t12BLA5mulgmNmibRbU19D0j0mry5+Y1w",
	"jdA7wuukUtUmoVO1EahVoOK7AjaZJ6QUqsyId7vvj4xQJ1lWSS/1PuozdBWQjUDXMElqxiuh+tVkxows",
	"4AZwNEk6ok4U8J0BZE6oktitdVD3ELECmQJCVg+Rbs+WRChydd6FmM6SFCKUYdEzbRTDZK2RHHTfS6yx",
	"I2DWjZLHRC0TLN5qeWBxteyXo7mXgo/WjHuEBKIDxZRbJPr1fYgcN2t8fjSdvUqK3zuWQCjo/EMseWQ0",
	"FCgLOo0iO/DUnmmfiCjox0ELeWCh1trnKAWH1ryipOiZYbwCMgvjo0Hprck5Y+d5/vDwMGYhPNZY5u1a",
	"m79dvLm8vrsczcaTceVqGYgQLhpHK8NllCF5soGzmwXN6AbQRoI2UyZNxaZBfwYUM4LO6Ss/GWlGDXNV",
	"EGW+H7+b2PIlBAvQUZ1aee7pFbin6WQDPdGlw5LZZBJHkXJeLv5iY4wUPKzPP9mot+gbLx+CwYwCuUd9",
	"86s/0clX3DOO1sRW5+ww5IJ8bFPXDLeREMKkJHvyju3BhufzCph01bO0/hLDaTqHp+5lENcSXgH/HDcL",
	"DZtvgkGYdlb29wtiCS3YnupcF9uvRqMfCP0mc9jA7huKZXhpSBRxtXyyss7Q/XdElNHTf2LPhXKAikkS",
	"pxKB9sGugAJ5hA0GW9AS7i8Ff+EKncvDN7WF40vKf90XDvyljMGvCHWx4d0vDoXcvzv8GQAA//+b9PFV",
	"Og4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
