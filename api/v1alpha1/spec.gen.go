// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xVwY7kNBD9FctwACnppHtnYcltZhmgBT2MZpe+rPbgcaoTL45tyk6G1qj/HdnOpDvE",
	"IA4rTrFS9qvn51dVz5TrzmgFyllaPVPLW+hYWN4iavQLg9oAOgHhN9c1+G8NlqMwTmhFq7iZhFhG4U/W",
	"GQm0uirLjLqjAVpRoRw0gPSUUXhBTmF0YC1rZjB0qwYmRU0Q/ujBOmIYsg4coCU52fsQ8xjkByYk1HTK",
	"aR0K1dDTafqjHz8Bd57EvWQcOlDuAazRysLyqq22bknzPcMGHAnBS5L+R/7tm++W6TMq6iXORIBsv58B",
	"mZdAfvX6mxTai0QLyHeOud4mJdzviO05B2sPvZRHEpLUKXQbQP6N77hjwfk/Kr/fJVxl+mXGu757BCT6",
	"QN7e/0a4RpglfZP0lhoSzlKDQK0C+a9qGDJ/hUaoJiMGdf31/Cqok7oo1iUkv2MdeIauBTIIdD2TpGO8",
	"FWquPzMmt4ADYF6uU/A6IfmvBpA5oRpij9ZBN0PEFmQKCFm3RHq43hGhyI83lxDrTVJChCYc+gfjxzA5",
	"aCSTU2fEepsDsy5PXhO1TKj4oOWk4n43f47+UQqeHxj3CAlEB4opt01U2PsQ+Xt5xf35evMqaVffYwRC",
	"TasP8cmjouGBsuDTaLJJp/FOL0RETT8uTO+BhTpoz1EKDmO7iZai14bxFshmVdKM9ih9M3HO2Koonp6e",
	"ViyEVxqbYjxri1+2b2/v3t3mm1W5al0ngxDCxVIfbbiLNiTnwr2+39KMDoA2CjSsmTQtWwf/GVDMCFrR",
	"V6syMDHMtcGURQtMutYvGwgdUUdjauVlpz/FsFckttJwalOWCUf/HES2fdcxPE5nCW+B/x5CRTBVMQQT",
	"m7EDz/OFCwWbjAPhRtfHOJuU826snn29ScHDmeKTjXaOw82vvkQ40Ip+UZynXzGOvmK/i+91NoLDHk7p",
	"232WjMtRFAjMldvvzuV20cr90119Ri5x6ify37Bp/vqcr/+PnFvlABWTJHZOAuPGSwMF8QhbNN8AF89Z",
	"Wn14HguroKePp78CAAD//+niJNX2CAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
