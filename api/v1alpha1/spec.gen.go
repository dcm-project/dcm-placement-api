// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xW32/bNhD+V4jbHiVLdtx01ZtrZ5uyxMnWZEUbBAUjnS0mEqmQlB0v8P8+kLRj60ea",
	"DWiLDduTLfJ4x/vu++74CIkoSsGRawXRI6gkw4Lav6OyzFlCNRPcfJZSlCg1Q7vJaYHmN0WVSFY6I5jS",
	"AomYEZ0hoXvHPcAHWpQ5QgS0LH2FcoHSD/vggV6VZllpyfgc1h6YTZZ0eH/nNp4JwKsCoitY4o3zDh4k",
	"gmvKOEq47oijGUoXZEarXEM08BoBz0XOkhW5YCi7g258Mq5xjtI4/UNwB1Dd00ez/AIyV1Apf4lK+waW",
	"7f+BuTvTWFiv7STcApWSrmC99kDifcUkpsafLdIO0B0I4uYWEw0ePPgUS1+iEpU0kGtZ4drbL/0JU7pd",
	"/r0U7PfTBb+XOIMIvgt2tAo2nAr2vP6GqhRcYTsFDzg+6E8lneMnLe6Qt8G8MMtkJiSRqCXDBeNzC6w5",
	"ScxJg7REVeVa1biHq+Py4zg+jG+PVqeDy3B68eHg5P3l8Ox9rE8vju9OV/1sOrkcnFz8uprefniYTo4O",
	"ppPR8nR8/KZN1QbaNUxaWNdRfcq/hSxL2wnHk5dE1R8c4PDV4Wsff3hz4/cH6YFPh68O/eHg8LA/7L8e",
	"hmEIHsyELKiGCKqKpV3a+8fJ+jOq/bcr9S9q8UhKIds8SUTagaU1JnZv777DMOxCALeeu3wUqBSd19xA",
	"zBc0ZykxrEdlpCZpgRqlIj753WxZqMiPlOWYvigYF7+tFGPH+Ey4NLmmielA62Z3noxPyXlOEyyQazI6",
	"j8GDnCW4kZWjMoxKmmRIBj3D/0rmEEGmdamiIFgulz1qt3tCzoPNWRWcxOOj6bsjf9ALe5kuckc7bSFo",
	"BlygVO46iz7Ny4z2jbUokdOSQQQHvdBGLqnObN2CZuuco27XwHRdQvOcmCRH+yesc2k/4nRj2TCQm+Zi",
	"3Q/CcIsjct3o3cGtcsPdtei/0cDtWLCVql/87BeT//ALBnX87wj1lj4x0cR89S1ixlyj5DQnrtUR3Bh6",
	"oKqioHIFEfyErnS1Qq89KIXqqPRYItVIqK10vd/UC+0MRzWLnQAhump6PrN/aE7iiR2WX2B+MOP3vkK5",
	"gu2sADtIdrA2JX/tNI9KvxXp6mtQ0dVp11g2fbOhgv7XCL17xvyvhA4lbLnNa7wzNrUuGDyydO2UkaPu",
	"mGoTu97WCLmhClMiOKk4u6+QxJOWbNzZz8rGsto06Aap65TaJ/kL7yhH+hr9ht+aflNBxptw/3UabunT",
	"QcMMaa6zZ8fwz3abJBkmd7aHdr052vPYHXtmEre7RO2y+yFdwi4zR1X3gAlgfb3+MwAA//9xVF+iug8A",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
