// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xX33PaOBD+VzS6e7QxEJJeeaOQa8gFkrsm12kzmY6wF1AiS44kB2iG//1GkgEbq0lm",
	"runMzfUpWD92tbvffvvlEccizQQHrhXuPmIVzyEl9mcvyxiNiaaCm89MigykpmA3OUnB/E1AxZJm7hAe",
	"kxSQmCI9B0RK1wMMS5JmDHAXkywLFcgHkGGzhQOsV5lZVlpSPsPrAGdEz+um+4QLTmPCkNnfOJGgRC5j",
	"2Pew8ayiVvsAOodHb0L47e0kbLWTg5B0Do/CTvvoqNVpvek0m00cYAkkOedshbta5uB5lXkyjT0xf3Ab",
	"3wib5ynuXuMFTFzMOMCx4JpQDhLfePxoCtI5mZKcadxtB3sOLwSj8QpdUpB+p4VNyjXMQBqjXwV3Zata",
	"+myWn6nXNc5VuAClQ1Osze+2eTvVkFqr9SDcApGSrPB6bdJ7n1MJibFnobNL6C4JYnILscYBXoYEsnBb",
	"W1uSdVAG5BlVug7KcuHN9/aBv0qY4i7+JdqBPSqQHpWs/gUqE1xBPYQAc1jqLxmZwRct7oDXk3lpltFU",
	"SCRBSwoPlM9sYs1NZG6aTEtQOdOqgldYnWaf+8Oj4e3xatS+ao4vPx2cfbzqnH8c6tHl6d1o1ZqPB1ft",
	"s8s/V+PbT8vx4PhgPOgtRv3Tt/UG2st2JSe1XFezuo2/llma1AMeDp5r9Rf23lTIlGjcxXlOEx8j/CSb",
	"F5HNE1zyX+ePFzLEsZRC1tEbi8STS3sY2b3SezvNpi8DsLHss5GCUmRWxcWQPxBGE2R6EZQhAElS0CAV",
	"CtHfZsumCv1OKAMv6t2C36PdK7uba52pbhQVK41YpJF9s4omJAmLV1SaTdJQwhQkcAvpp2nExV+c8tHI",
	"CRDmWqma+3/dYHNn+CVdo4nOPTB1T0PFdt32yhv9c5B7xBnLJWFbM8a0onzGQBu37pFmIWdE7gJZr411",
	"yqfCQZNrEptZtt6f84P+CF0wEkMKXKPexRAHmNEYCoJ2pIh7GYnngNoNQyy5ZCUsLBaLBrHbDSFnUXFX",
	"RWfD/vH4w3HYbjQbc50yRxXaZmTf4QNI5Z7z0CIsm5OWOS0y4CSjuIsPGk3r2ZTRpj7aH8Iz0PWSmPmN",
	"CGPIBNkr37DGpf0YJsXJvQO7VsLd633LI7KkaZ4inqcTR3CWZpAWZi7n0pATNQfvc5Cm8kUeU7J0413R",
	"r1aeWHlQYqctGayDb4/+jMwo33Cgz01JQXh8bOF3Y+DuhrFNYrvZ3KAFuN7TOtGtchJ9Z++FgsfKKIvH",
	"akDnf5gqd76jU8fMHlfvyJYjjc/DH+FzyDVIThhy0gBBcTDAKk9TIle4i9+DA2gFzkYwCOXBc18C0YCI",
	"xXN1Elbh7A72KieexPO5/UEYGg4swr6D3vLh0gqvZ/Boi/ROJKvXgKKr027kFBN9rwtar+F6J/t/doKn",
	"EzbY5hXcmTMVro8eabJ2ncFAe5TLwK7XewRNiIIECY5yTu9zQMNBrW3c3SfbxqLaqo0qqKuQKoP8mf87",
	"PCTc+dHwGwvUL9z932G4gY8HhvOt9vSKjUL/xXOI7yyH+pRVFW/vQZ/sdOcrDeKTrSD0sU4l+HII7oLL",
	"lIO+k30RXt+s/wkAAP//n+0vA9ATAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
