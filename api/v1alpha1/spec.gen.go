// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTW/cNhD9K8S0R2n14bXT6rZJ3HbRNDWQIocaPoyl2RVTimRJyu7W0H8vSK67kqXA",
	"KNDk5MtCy5l58/GeRnyAWnVaSZLOQvUAtm6pw/C40VrwGh1X0v/VRmkyjlMw8sb/NmRrw3V0ge1bpnbM",
	"tcRwFJoA/YWdFgQVFOUZrc8vXqX03fe3aVE2Zymuzy/SdXlxUayLV+s8zyGBnTIdOqig73kDCbiD9tHW",
	"GS73MCQgsaN5/vfY0XMVoNapJXNHJs2LJWhv5PUC+odo+EwC2XdQXcM93UZ0uFnAdpxMBN5hLxxUZfIk",
	"yZUSvD6w3ziZ5URHTC4d7cl40L+VjJRMkX73x89M4xp6mxJal/pRPD6XvnbuqAuo8ybiARqDBxiGBAz9",
	"2XNDjccLxJyGeBqCuv1EtfPxI1m949YFMT0m+9bQDir4JjuJMjsqMhvLcVZGApfGKDPXaa2aBS6DMwu2",
	"0TjWeb40YHpEXsLoyFrcT2BgK+9Q8Ib5wZB1TKPBjhwZy1L20ZtCF+wH5IIW9P1kpjH/fJTej8ud8qUJ",
	"XpO0odP4bsBGY90SK1f+heqNgApa57Stsuz+/n6FwbxSZp8dY232bvvm8v2Hy7Rc5avWdSJK1oWePnLj",
	"ehTsF6xbLoldCaypI+nY5moLCdyRsXEudwUK3WLho5UmiZpDBWerPFSi0bWBmGykyXCwp6AFT1443DZQ",
	"wY/kNmM/PxmrlS/XO5d5HkmWjmQIH6Fmn2zcXFFB/0FfQZdhvlPKf/3ZN7X+H5NG1S6keo3/6sfnPP8a",
	"ObfSkZEoWFxhjI6OCdi+69AcIiEMhWAT9oYEtLIL9L0xhI42k+1z7Oq1ag5fgrvY2On9caanYSab4sul",
	"fpHME8lEETCUk8+Q95nsgOyBN0Ncs4IczcX0NpxPxXRarVBdPwD3NfkVA493BAgXiKkcklHXz1w1hpuv",
	"s3FepLMonUj5onRaQuHaz344formZfbmc55kjbGsbqn+I1YeS4wai9/SDIab4Z8AAAD//4uO2V49CwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
