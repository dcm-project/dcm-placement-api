// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xWUY/jNBD+K5bhAaSkSXt7cORt91iggi6rvaMvp3vwOtPEh2ObsZOlWvW/I9vZtCEG",
	"8XDiqVbG/ubz529m+ky57oxWoJyl1TO1vIWOheUtoka/MKgNoBMQPnNdg/+twXIUxgmtaBU3kxDLKPzJ",
	"OiOBVldlmVF3NEArKpSDBpCeMgovyCmMDqxlzQyGbtXApKgJwh89WEcMQ9aBA7QkJ3sfYh6D/MCEhJpO",
	"Oa1DoRp6Ok1f9OMn4M6TuJeMQwfKPYA1WllYXrXV1i1pvmfYgCMheEnSf8i/ffPdMn1GRb3EmQiQ7fcz",
	"IPMSyK9ef5NCe5FoAfnOMdfbpIT7HbE952DtoZfySEKSOoVuA8i/8R13LDj/R+X3u4SrTL/MeNd3j4BE",
	"H8jb+98I1wizpG+S3lJDwllqEKhVIP9VDUPmr9AI1WTEoK6/nl8FdVIXxbqE5HesA8/QtUAGga5nknSM",
	"t0LN9WfG5BZwAMzLdQpeJyT/1QAyJ1RD7NE66GaI2IJMASHrlkgP1zsiFPnx5hJivUlKiNCEQ/9g/Bgm",
	"B41kcuqMWG9zYNblyWuilgkVH7ScVNzv5s/RP0rB8wPjQjX5EzyOMqbAHSim3DZRbO9D5O+VFvfn682r",
	"pHN9uxEINa0+xNeP4oa3yoJlo98mycbrvRARNf248L8HFuqgPUcpOIydJ7qLXhvGWyCbVUkz2qP0fcU5",
	"Y6uieHp6WrEQXmlsivGsLX7Zvr29e3ebb1blqnWdDEIIF6t+dOQuOpKca/j6fkszOgDaKNCwZtK0bB2s",
	"aEAxI2hFX63KwMQw1wZ/Fi0w6Vq/bCA0Rx09qpWXnf4Uw16R2FXDqU1ZJsz9cxDZ9l3H8DidJbwF/nsI",
	"FcFfxRD8bMZmPM8XLhQcM86GG10f45hSzhuzevalJwUPZ4pPNjo7zjm/+hLhQCv6RXEehMU4BYv9Lr7X",
	"2QgOezilb/dZMi6nUiAwV26/O1feRVf3T3f1GbnEPwCJ/DdsGsU+5+v/I+dWOUDFJInVT2DceGmgIB5h",
	"iz4c4OI5S6sPz2NhFfT08fRXAAAA//9NUSi+AQkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
