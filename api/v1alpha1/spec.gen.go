// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWUXPbNgz+Kzxsj5IlO0666c1ts823rstdd31YLg+IBFvsKJIjqaSeT/99R9KJpZi9",
	"3O7WPuXNBiB8wIcPkPZQq04rSdJZqPZg65Y6DD9XWgteo+NK+r/aKE3GcQrOWkmHXJJZd7glb2nI1obr",
	"GA7BzDbKsMdI1pAWateRdJABfcZOC4IK5JbLz5VAR9Y73E57q3WGyy0MGfAmkf4tUxvmWmI4qnKcdb44",
	"o+X5xaucfvjxNp8vmrMcl+cX+XJxcTFfzl8ty7KEDDbKdOiggr7nTQpdYpdo7z129FwFqHVuydyRyct5",
	"KrV38jqR/UN0fAFA9h1U13BPtzE7ZMdpwE0Cx3EyEWSDvXBQLbIngFdK8HrH/uBk0qCHnFw62pLxSf9R",
	"MiphmulPb36GmWvobU5oXe5pefi98LVzR13IetpENKAxuINhyMDQ3z031Ph8YUhHQo8kqNtPVDv//EjN",
	"77h1HuMR7HtDG6jgu+K4C8VhEYrxFpyUkcGlMcqk1qNJzDUEs+Ab0bEsyxTB9JA5laMja/3ejfW2lnco",
	"eMM8MWQd02iwI0fGspx99K7QBfsJuaCE1p9wGvFPqfRxXG6UL03wmqQNncY9gZXGuiW2mPnl6o2AClrn",
	"tK2K4v7+fobBPVNmWxyetcW79ZvL9x8u88WsnLWuE1GyLvT0kRvXo2C/Yd1ySexKYE3+grDV1RoyuCNj",
	"Iy93cxS6xbl/WmmSqDlUcDYrQyUaXRsGU4w0GQxbClrwwwvGdQMV/ExuNY7zzFitfLk+eFGWDzfQH7Nq",
	"D6OsxScbD2ZU0H/QV9Bl4Hc68t9/9U0t/0fQqNoE1Gt81I/HPP8WmGvpyEgULJ4zRofADGzfdWh2cSAM",
	"hWCT6Q0ZaGUT43tjCB2tJtfn0NVr1ey+xuxiY8f9caan4UQ2868H/SKZJ5KJImAoJ68hHzO5AcWeN0M8",
	"s4IcnYrpbbBPxXQ8rVBd74H7mvyJgYfvBQgfE1M5ZKOun/nsGG6+zcV5kU5SOnHkSem0hMK1X3xx/BLd",
	"6emd8jxBjc+yuqX6r1h5LDFqLL5LCxhuhn8DAAD//yUnICm0CwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
