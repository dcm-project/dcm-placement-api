// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xW32/bNhD+V4jbHiVLVpx005vbZpuxrgvQoQ8L8nCRzhY7iuRIKp4X6H8fSNqzFKkI",
	"Bqx9yosh8358d/d9OvERKtVqJUk6C+Uj2KqhFsPjWmvBK3RcSf9XG6XJOE7ByGv/W5OtDNfRBTZvmdoy",
	"1xDDQWgC9Be2WhCUsCwuaHV59Sql776/T5dFfZHi6vIqXRVXV8vV8tUqz3NIYKtMiw5K6DpeQwLuoH20",
	"dYbLHfQJSGxpiv8eW3quAtQ6tWQeyKT5ci61N/JqJvuHaPgMgOxaKG9hT/cxOyRQKemQSzJwN4PjOJkI",
	"ssVOOCiL5AngjRK8OrDfOJl50GNOLh3tyPikfysZ6Rln+t0fPzOZW+hsuifrUj+W03Pha+eO2pB12kQ8",
	"QGPwAH2fgKE/O26o9vkCSeeBnoeg7j9R5Xz8QGLvuHVBWCewbw1toYRvsrNAs6M6s6E0J2UkcG2MMlPN",
	"Vqqe4TU4s2AbjGOV53MDplPmuRwtWYu7URrYyAcUvGZ+MGQd02iwJUfGspR99KbQBfsBuaAZrT+ZacSf",
	"jtL7cblVvjTBK5I2dBrfE1hrrBpixcK/XJ0RUELjnLZllu33+wUG80KZXXaMtdm7zZvr9x+u02KRLxrX",
	"iihZF3r6yI3rULBfsGq4JHYjsKKWpGPrmw0k8EDGxrk8LFHoBpc+WmmSqDmUcLHIQyUaXROIyQaaDAc7",
	"Clrw5IXDTQ0l/EhuPfTzk7Fa+XK9c5HnkWTpSIbwQdbsk41bLCroP+gr6DLMd0z5rz/7plb/I2hU7QzU",
	"a/xXPx7z8mtgbqQjI1GwuM4YHR0TsF3bojlEQhgKwUbs9QloZWfoe2MIHa1H2+fY1WtVH74Ed7Gx8/vj",
	"TEf9RDbLLwf9IpknkokiYChHnyHvM9oB2SOv+7hmBTmaiultOB+L6bxaobx9BO5r8isGTvcFCJeJsRyS",
	"QdfPXDv6u6+zcV6kMyudSPmsdBpC4ZrPfjh+iuZ59qZzHqHGWFY1VP0RK48lRo3Fb2kG/V3/TwAAAP//",
	"MH41kkkLAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
