// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYXW/bNhf+KwTf92IDJMt24y31nfOxzFidBknmiwW9YKhjiy1FciTlzCv83weSsi1Z",
	"TNIAzRYURV0d6jmHz3nOh/0VU1kqKUBYg8dfsaEFlMR/nCjFGSWWSeH+q7RUoC0DbxSkBPdvDoZqpsIh",
	"fElKQHKBbAGINF5PMPxFSsUBjzFRKjWgV6DT/gAn2K6Ve2ysZmKJNwl2RkYj6DfB8IgDUZV4fIcf4D6g",
	"408R7L+lCPG3kf9wj58J/A5XJgVibOqi3n4eOjfMQulRO/7qB0RrssabTYI1/FkxDbnD8xzu77uPV95/",
	"Bmrd+40cfGDGOh87Z//XsMBj/L9sn8GsTl/WzF0njASfAeVEQz4vHRDh/OMCj++ehpzP8CY5lAHVQCzk",
	"E9vl9HRnamZ/2B+O0v77dHB8OxiNj47G/X5MA7kwl1GFnV3eoMvA2x5Uaap7RKme0jLvUVnGIJfEwgNZ",
	"dyEvakMTcdDvuT9RfbI8ElZNKJrP0PSsBZXXpvRo9FMUTk3yXIOJyHJ6hba2WHDDGJwAWxLzJVKbtaGV",
	"jdGot/0bycOmo8hPLfG8SJINzUUUea611N02Q2UeEYE/jLytcZujfn+Hy4SFJWiHDFvkGEYJxpBlW01T",
	"sSKc5ciVKhiLFNGkBAvaoBTNncnXFfqFMA55lLVmlQf/seK+4oRCCcJeg1FSGOjev5AmUlq3RC/BIm9s",
	"Ru4epD8fv/9W1e4CONSs2hoeE+2Wt26PtsRWJsrrfIZMRSkYs6g4XyPvJI9OAA/yVLz1iU7Mz6djG1ks",
	"Idch4y+Wtm+NHUnPZxE9qypSmVV5D9qNn9Or3xGVGlo3O46qWqwimhYrpqXwDP2QwypxPC2ZWCbIdcYf",
	"D5qmjJL//GRfMW0rwlFJaMEEvGy6y0hePyrQxDKxRGZtLJQtRF0AjwFpUnaRriczxAS6OGlCDIZRCjUs",
	"69UmWl3BjBZSo105tAJrrgPd6CSPsHgt+Y7F+aydjuqeM5ouCHUIEUQLggg7jZTxrbcc1nA4nw6G756t",
	"iXoRcYz6BCVep0Fk9VW65eJAmFhIFw9nFOr+FeSDJ4rQAtDQj5VKc9edrFVmnGUPDw894s09qZdZ/a7J",
	"PkxPzy9vztNhr98rbMn9pZkNvaOW3CxIDu07weRqihO8Am0CGasB4aogA681BYIohsf4nZuYOMGK2MIL",
	"MGtsef7BEny9yyBFKRzR+ALspHnO0RZatX9n2O+HISWsE4dbpfans88mqCt0iRdsbL73eH4PyuQ3d6mj",
	"7+g0TN2IqxOym39eLaYqS6LXgRJEOEct/jYJVvWkahMYlsBJa6OucU9kvn4N9sJ19vK2uoJNJ3GD13P9",
	"BpMW0oCIaH25cWey7Xq6Kp8sg/329qpVcLBbvvUi2JJ3OBJN4LYAwm3xKK2/BnOczu6tWxGEdxEtgH4J",
	"zvyQylZ+KMaL0TdNP3ZeowTdEvQtlff9EtfdnyNJnM/247uxf/43Ikrw6N/wORUWtCAchU0MQX2wKSBP",
	"HiKdZc5rSW8X4We6QmNhftW2cLiYv/W+sOMv1hjqn7hAG/+bS1iOMvfd+p8AAAD//0C7Wb2NEwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
