// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xVXU8rNxD9K9a0j7vZD0Jo9y1Q2kalFImKhyIeht1J1tRru7Y3aYry3yvb4SYhi9CV",
	"LvfpvqDFM3POzJlj5xlq1WklSToL1TPYuqUOw+dUa8FrdFxJ/682SpNxnEKQN/5vQ7Y2XMcUmP3E1Jy5",
	"lhjulSZA/2KnBUEFRXlC49PJWUo//PiYFmVzkuL4dJKOy8mkGBdn4zzPIYG5Mh06qKDveQMJuLX21dYZ",
	"LhewSUBiR8f819jRex2g1qklsyST5sUQtA/yegD9NgbeIJB9B9U9rOgxosPDALbjZCLwHHvhoCqTVyQ3",
	"SvB6zf7kZIaJtphcOlqQ8aD/KRlXcoj0lz9+R4176G1KaF3qpXj5Ln3v3FEXUI+HiAdoDK5hs0nA0D89",
	"N9R4vLCYnYg7EdTjE9XO1+/Z6opbF8z0Qva9oTlU8F22M2W2dWS2b8ejNhK4NEaZY5/WqhnYZUhmIbYn",
	"xzjPhwSmF+QhjI6sxcUBDMzkEgVvmBeGrGMaDXbkyFiWsjsfClOwn5ELGvD3K00j/7GUPo/LufKtCV6T",
	"tGHSeDdgqrFuiZUjf6F6I6CC1jltqyxbrVYjDOGRMotsW2uzq9nF5fXtZVqO8lHrOhEt68JMd9y4HgX7",
	"HeuWS2I3AmvqSDo2vZlBAksyNuqyLFDoFgtfrTRJ1BwqOBnloRONrg2LyfY8GQ4WFLzglxcOZw1U8Au5",
	"6X6eV8Zq5dv1yWWexyVLRzKU76FmTza+XNFBn+Gv4Mug7+HK//jNDzX+gqTRtQNU5/jJP57z9GtwzqQj",
	"I1Gw+IQx2iYmYPuuQ7OOC2EoBDvY3iYBrezA+i4MoaPpweuznepcNeuP2F0cbHd/nOlpc2Sb4uOov1nm",
	"lWWiCRjKg58hn5O1hMK1b97+X2N4+NIf63zAGmtZ3VL9d+w8tmihun/ePogZbB42/wcAAP//+CVPNQIJ",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
