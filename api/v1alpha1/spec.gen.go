// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xVwW7bOBD9FWJ2j7Ile7MX3ZwgbY2maYAUOTTIYUJNLKYUyZK0XTfQvxcknViKFBQF",
	"mp56isKZeTPz3iP9AFw3RitS3kH5AI7X1GD8XBgjBUcvtAr/GqsNWS8oBhU2FP5W5LgVJiXBOTbE9B3z",
	"NTHslGdA37AxkqAENGbiyG7ITooZZOB3Jhw7b4VaQZtBCAo+gn6ZAi80UOsGymvY0m1Ch5sRbC/IDoEv",
	"tBR8xz4JsuPgA5zvWiUe+kCfw/FPCLiGtZsQOj8J2z9+z8O4wlMTUYdzpwO0FnfQthlY+roWlqqAF7U4",
	"8HbYW9/eE/ehvqPlmXA+9Hhq9q+lOyjhn/zghHxvg7zrgcEYGZxaq+3QHFxXI/LFZBZjHTqOiuIJVyhP",
	"K7IBmR6RxzAacg5XPRhYqg1KUbFADDnPDFpsyJN1bMKuQihuwd6gkFQNNX3Gaeo/pDLkCXWnw2hScFKO",
	"DtcBFgZ5TWw+LYK0VkIJtffGlXm+3W6nGMNTbVf5vtblZ8uT0/PL08l8Wkxr38jkUh93uhLWr1GyD8hr",
	"oYhdSOTUkPJscbGEDDZkXeJlM0NpapyFam1IoRFQwn/TIk5i0NdRmLzjyXiwouiFIF48XFZQwlvyi25e",
	"YMYZHcYNyfOiSCIrTyqWd1Dze5eei+SgX/BX9GXkty/5x/dhqaPf2DS5dqTVMT75J/T8/0/0XCpPVqFk",
	"6dVitE/MwK2bBu0uCcJQStZTr83AaDci34kl9LTovT77rY51tXsN7dJih/vj7ZragW1mr9f6r2WeWSaZ",
	"gKHq/QyFnLwmlL5+8fa/S+HxSz/kudc11TJeE/+SJk8jOiivH/YPYg7tTfsjAAD//ypeFoV3CAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
